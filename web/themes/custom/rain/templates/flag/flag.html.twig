{#
/**
 * @file
 * Default theme implementation for flag links.
 *
 * Available functions:
 * - flagcount(flag, flaggable) gets the number of flaggings for the given flag and flaggable.
 *
 * Available variables:
 * - attributes: HTML attributes for the link element.
 * - title: The flag link title.
 * - action: 'flag' or 'unflag'
 * - flag: The flag object.
 * - flaggable: The flaggable entity.
 */
#}
{% spaceless %}
	{# Attach the flag CSS library.#}
	{{ attach_library('flag/flag.link') }}

	{# Depending on the flag action, set the appropriate action class. #}
	{% if action == 'unflag' %}
		{% set action_class = 'action-unflag' %}
	{% else %}
		{% set action_class = 'action-flag' %}
	{% endif %}

	{# Set the remaining Flag CSS classes. #}
	{%
  set classes = [
    'flag-' ~ flag.id()|clean_class,
    'js-flag-' ~ flag.id()|clean_class ~ '-' ~ flaggable.id(),
    action_class,
    'flex',
    'items-center',
  ]
  %}

	{%
  set link_classes = [
    'inline-flex',
    'items-center',
    'gap-1',
    'px-2',
    'py-1',
    'border',
    'border-current',
    'rounded'
  ]
  %}

	{# Set nofollow to prevent search bots from crawling anonymous flag links #}
	{% set attributes = attributes.setAttribute('rel', 'nofollow').setAttribute('title', title).setAttribute('aria-label', title) %}

	<div class="{{classes|join(' ')}}">
		<a{{attributes.addClass(link_classes)}}>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="{{ action == 'unflag' ? 'currentColor' : 'none' }}" viewbox="0 0 24 24" stroke="currentColor" stroke-width="2">
				<path stroke-linecap="round" stroke-linejoin="round" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"/>
			</svg>
			<span>{{ title }}</span>
		</a>
	</div>
{% endspaceless %}
