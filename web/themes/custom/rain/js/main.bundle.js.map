{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./icons/more-vertical.svg","webpack:///./icons/chevron-down.svg","webpack:///./icons/move.svg","webpack:///./icons/info.svg","webpack:///./js/src/cshs.es6.js","webpack:///./js/src/dropbutton.es6.js","webpack:///./js/src/simpler-select.es6.js","webpack:///./js/src/tabledrag.es6.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","Drupal","behaviors","cshs","attach","context","settings","once","each","idx","element","id","simplerSelect","jQuery","DropButton","dropbutton","options","extend","title","$dropbutton","this","$list","find","$actions","length","$primary","slice","addClass","append","theme","on","proxy","hoverOut","hoverIn","focusOut","focusIn","dropbuttonClickHandler","e","preventDefault","target","closest","toggleClass","dropButton","$dropbuttons","$body","il","dropbuttons","push","toggle","show","hasClass","timerID","window","clearTimeout","setTimeout","open","close","dropbuttonToggle","join","moreVertical","pluginName","defaults","noneLabel","noneValue","labels","Plugin","$element","$currentSelect","selectOptions","init","that","destroy","$option","val","label","text","parent","data","children","tree","buildTree","initialValue","initialParents","$selectElement","createSelect","shift","getAllParents","reverse","after","selectSetValue","$nextSelect","getOptionInfoByValue","hide","nextAll","remove","level","chevronElement","chevronDown","selectElement","$select","attr","$wrapper","option","replace","change","selectRemoveNext","$selected","selectedValue","parentValue","undefined","optionInfo","addSelectAfter","selectGetLevel","array","grep","child","parents","$newSelect","getOptionByValue","fn","drupalSettings","showWeight","JSON","parse","localStorage","getItem","tableDrag","keys","forEach","base","table","initTableDrag","tableSettings","self","$table","dragObject","rowObject","oldRowElement","oldY","changed","maxDepth","rtl","css","striping","scrollSettings","amount","interval","trigger","scrollInterval","scrollY","windowHeight","indentEnabled","group","relationship","limit","indentCount","indent","testRow","appendTo","$indentation","prepend","indentAmount","offsetLeft","makeDraggable","before","toggleColumns","wrap","initColumns","document","event","dragRow","originalEvent","touches","dropRow","newValue","displayColumns","hidden","cell","columnIndex","some","tableSetting","field","eq","index","addColspanClass","$row","cells","colSpan","filter","displayWeight","showColumns","hideColumns","findOnce","setItem","removeItem","$tables","rowSettings","row","tableSettingsGroup","map","delta","targetClass","is","rowSetting","item","$item","handle","move","$indentationLast","Math","max","type","dragStart","safeBlur","keyCode","groupHeight","keyChange","$previousRow","prev","previousRow","direction","offsetHeight","swap","scrollBy","tBodies","rows","parseInt","$nextRow","next","nextRow","nextGroup","nextGroupRow","removeClass","restripeTable","onDrag","initOffset","getPointerOffset","initPointerCoords","pointerCoords","indentPointerPos","topY","offset","top","bottomY","currentPointerCoords","y","x","scrollAmount","checkScroll","clearInterval","setScroll","currentRow","findDropTargetRow","xDiff","indentDiff","round","indentChange","indents","droppedRow","$droppedRow","updateFields","updateField","markChanged","insertBefore","fadeIn","removeIndentClasses","onDrop","pageX","pageY","clientX","body","scrollLeft","clientLeft","clientY","scrollTop","clientTop","docPos","pointerPos","left","not","rowY","rowHeight","firstChild","isValidSwap","changedRow","$changedRow","sourceRow","useSibling","copyDragClasses","source","targetElement","sourceClass","sourceElement","action","siblings","findSiblings","values","maxVal","weight","targetRow","className","cursorY","de","documentElement","b","innerHeight","clientHeight","clientWidth","all","pageYOffset","setInterval","aboveTable","belowTable","end","tableRow","method","addClasses","$tableRow","groupDepth","findChildren","merge","parentIndentation","rowIndentation","indentNum","el","prevRow","validIndentInterval","min","position","detachBehaviors","attachBehaviors","onSwap","$prevRow","maxIndent","minIndent","$group","abs","onIndent","directions","checkRowIndentation","checkRow","marker","swappedRow","tableDragChangedMarker","info","tableDragIndentation","tableDragChangedWarning"],"mappings":"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","file":"js/main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"fill-current stroke-current h-6 w-6 feather feather-more-vertical\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"1\\\"></circle><circle cx=\\\"12\\\" cy=\\\"5\\\" r=\\\"1\\\"></circle><circle cx=\\\"12\\\" cy=\\\"19\\\" r=\\\"1\\\"></circle></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"fill-current h-6 w-6\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\\\"></path></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" class=\\\"fill-current stroke-current h-6 w-6\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"feather feather-move\\\"><polyline points=\\\"5 9 2 12 5 15\\\"></polyline><polyline points=\\\"9 5 12 2 15 5\\\"></polyline><polyline points=\\\"15 19 12 22 9 19\\\"></polyline><polyline points=\\\"19 9 22 12 19 15\\\"></polyline><line x1=\\\"2\\\" y1=\\\"12\\\" x2=\\\"22\\\" y2=\\\"12\\\"></line><line x1=\\\"12\\\" y1=\\\"2\\\" x2=\\\"12\\\" y2=\\\"22\\\"></line></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"stroke-current h-6 w-6 feather feather-info\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\"></circle><line x1=\\\"12\\\" y1=\\\"16\\\" x2=\\\"12\\\" y2=\\\"12\\\"></line><line x1=\\\"12\\\" y1=\\\"8\\\" x2=\\\"12\\\" y2=\\\"8\\\"></line></svg>\"","/**\n * @file\n * Behavior which initializes the simplerSelect jQuery Plugin.\n */\n\n(function ($) {\n  'use strict';\n\n  Drupal.behaviors.cshs = {\n    attach: function (context, settings) {\n      $('select.simpler-select-root', context)\n        .once('cshs')\n        .each(function (idx, element) {\n          // See if we got settings from Drupal for this field.\n          if (typeof settings.cshs !== 'undefined' && typeof settings.cshs[element.id] !== 'undefined') {\n            $(element).simplerSelect(settings.cshs[element.id]);\n          }\n        }\n        );\n    }\n  };\n})(jQuery);\n","/**\n * @file\n * Dropbutton feature.\n */\n\nimport moreVertical from '../../icons/more-vertical.svg';\n\n(function ($, Drupal) {\n  /**\n   * A DropButton presents an HTML list as a button with a primary action.\n   *\n   * All secondary actions beyond the first in the list are presented in a\n   * dropdown list accessible through a toggle arrow associated with the button.\n   *\n   * @constructor Drupal.DropButton\n   *\n   * @param {HTMLElement} dropbutton\n   *   A DOM element.\n   * @param {object} settings\n   *   A list of options including:\n   * @param {string} settings.title\n   *   The text inside the toggle link element. This text is hidden\n   *   from visual UAs.\n   */\n  function DropButton(dropbutton, settings) {\n    // Merge defaults with settings.\n    const options = $.extend(\n      { title: Drupal.t('List additional actions') },\n      settings,\n    );\n    const $dropbutton = $(dropbutton);\n\n    /**\n     * @type {jQuery}\n     */\n    this.$dropbutton = $dropbutton;\n\n    /**\n     * @type {jQuery}\n     */\n    this.$list = $dropbutton.find('.dropbutton');\n\n    /**\n     * Find actions and mark them.\n     *\n     * @type {jQuery}\n     */\n    this.$actions = this.$list.find('.dropbutton-action');\n\n    // Add the special dropdown only if there are hidden actions.\n    if (this.$actions.length > 1) {\n      // Identify the first element of the collection.\n      const $primary = this.$actions.slice(0, 1);\n      // Identify the secondary actions.\n      const $secondary = this.$actions.slice(1);\n      $secondary.addClass('secondary-action');\n      // Add toggle link.\n      $primary.append(Drupal.theme('dropbuttonToggle', options));\n      // Bind mouse events.\n      this.$dropbutton.addClass('dropbutton-multiple').on({\n        /**\n         * Adds a timeout to close the dropdown on mouseleave.\n         *\n         * @ignore\n         */\n        'mouseleave.dropbutton': $.proxy(this.hoverOut, this),\n\n        /**\n         * Clears timeout when mouseout of the dropdown.\n         *\n         * @ignore\n         */\n        'mouseenter.dropbutton': $.proxy(this.hoverIn, this),\n\n        /**\n         * Similar to mouseleave/mouseenter, but for keyboard navigation.\n         *\n         * @ignore\n         */\n        'focusout.dropbutton': $.proxy(this.focusOut, this),\n\n        /**\n         * @ignore\n         */\n        'focusin.dropbutton': $.proxy(this.focusIn, this),\n      });\n    } else {\n      this.$dropbutton.addClass('dropbutton-single');\n    }\n  }\n\n  /**\n   * Delegated callback for opening and closing dropbutton secondary actions.\n   *\n   * @function Drupal.DropButton~dropbuttonClickHandler\n   *\n   * @param {jQuery.Event} e\n   *   The event triggered.\n   */\n  function dropbuttonClickHandler(e) {\n    e.preventDefault();\n    $(e.target)\n      .closest('.dropbutton-wrapper')\n      .toggleClass('open');\n  }\n\n  /**\n   * Process elements with the .dropbutton class on page load.\n   *\n   * @type {Drupal~behavior}\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Attaches dropButton behaviors.\n   */\n  Drupal.behaviors.dropButton = {\n    attach(context, settings) {\n      const $dropbuttons = $(context)\n        .find('.dropbutton-wrapper')\n        .once('dropbutton');\n      if ($dropbuttons.length) {\n        // Adds the delegated handler that will toggle dropdowns on click.\n        const $body = $('body').once('dropbutton-click');\n        if ($body.length) {\n          $body.on('click', '.dropbutton-toggle', dropbuttonClickHandler);\n        }\n        // Initialize all buttons.\n        const il = $dropbuttons.length;\n        for (let i = 0; i < il; i++) {\n          DropButton.dropbuttons.push(\n            new DropButton($dropbuttons[i], settings.dropbutton),\n          );\n        }\n      }\n    },\n  };\n\n  /**\n   * Extend the DropButton constructor.\n   */\n  $.extend(\n    DropButton,\n    /** @lends Drupal.DropButton */ {\n      /**\n       * Store all processed DropButtons.\n       *\n       * @type {Array.<Drupal.DropButton>}\n       */\n      dropbuttons: [],\n    },\n  );\n\n  /**\n   * Extend the DropButton prototype.\n   */\n  $.extend(\n    DropButton.prototype,\n    /** @lends Drupal.DropButton# */ {\n      /**\n       * Toggle the dropbutton open and closed.\n       *\n       * @param {bool} [show]\n       *   Force the dropbutton to open by passing true or to close by\n       *   passing false.\n       */\n      toggle(show) {\n        const isBool = typeof show === 'boolean';\n        show = isBool ? show : !this.$dropbutton.hasClass('open');\n        this.$dropbutton.toggleClass('open', show);\n      },\n\n      /**\n       * @method\n       */\n      hoverIn() {\n        // Clear any previous timer we were using.\n        if (this.timerID) {\n          window.clearTimeout(this.timerID);\n        }\n      },\n\n      /**\n       * @method\n       */\n      hoverOut() {\n        // Wait half a second before closing.\n        this.timerID = window.setTimeout($.proxy(this, 'close'), 500);\n      },\n\n      /**\n       * @method\n       */\n      open() {\n        this.toggle(true);\n      },\n\n      /**\n       * @method\n       */\n      close() {\n        this.toggle(false);\n      },\n\n      /**\n       * @param {jQuery.Event} e\n       *   The event triggered.\n       */\n      focusOut(e) {\n        this.hoverOut.call(this, e);\n      },\n\n      /**\n       * @param {jQuery.Event} e\n       *   The event triggered.\n       */\n      focusIn(e) {\n        this.hoverIn.call(this, e);\n      },\n    },\n  );\n\n  $.extend(\n    Drupal.theme,\n    /** @lends Drupal.theme */ {\n      /**\n       * A toggle is an interactive element often bound to a click handler.\n       *\n       * @param {object} options\n       *   Options object.\n       * @param {string} [options.title]\n       *   The button text.\n       *\n       * @return {string}\n       *   A string representing a DOM fragment.\n       */\n\n      dropbuttonToggle(options) {\n        const dropbuttonClasses = [\n          'dropbutton-toggle',\n          'border-l',\n          'pl-3',\n          'flex',\n        ];\n\n        return `<span class=\"${dropbuttonClasses.join(' ')}\">\n          <span class=\"visually-hidden\">${options.title}</span>\n          <button class=\"flex\" type=\"button\">\n            ${moreVertical}\n          </button>\n        </span>`;\n      },\n    },\n  );\n\n  // Expose constructor in the public space.\n  Drupal.DropButton = DropButton;\n})(jQuery, Drupal);\n","/**\n * @file\n * Render standard select with hierarchical options: as set of selects, one for each level of the hierarchy.\n */\nimport chevronDown from '../../icons/chevron-down.svg';\n\n(function ($, pluginName) {\n  'use strict';\n\n  // Create the defaults once.\n  var defaults = {\n    noneLabel: '- Please choose -',\n    noneValue: '_none',\n    labels: []\n  };\n\n  // The actual plugin constructor.\n  function Plugin(element, options) {\n    this.$element = $(element);\n    this.$currentSelect = null;\n\n    this.settings = $.extend({}, defaults, options);\n    this.selectOptions = [];\n\n    this.init();\n  }\n\n  Plugin.prototype = {\n    init: function () {\n      var that = this;\n      // Ensure that we'll clearly initiate a new instance.\n      that.destroy();\n      that.$element.find('option').each(function () {\n        var $option = $(this);\n\n        that.selectOptions.push({\n          value: $option.val(),\n          label: $option.text(),\n          parent: $option.data('parent') || 0,\n          children: []\n        });\n      });\n\n      var tree = that.buildTree(that.selectOptions);\n\n      if (tree === null) {\n        return;\n      }\n\n      var initialValue = that.$element.val();\n      var initialParents = [];\n      var $selectElement = that.createSelect(tree);\n      var $currentSelect = $selectElement;\n\n      if (initialValue) {\n        if (typeof initialValue !== 'string') {\n          // If array, flatten it.\n          initialValue = initialValue.shift();\n        }\n\n        // Get all parents, starting from the initial value.\n        initialParents = that.getAllParents(initialValue);\n        // Reverse the parents, that they start from the root.\n        initialParents.reverse();\n        // Add the current value as the last leave.\n        initialParents.push(initialValue);\n      }\n\n      this.$element.after($selectElement);\n\n      $.each(initialParents, function (i, value) {\n        that.selectSetValue($currentSelect, value);\n\n        var $nextSelect = that.createSelect(that.getOptionInfoByValue(value).children, value, i + 1);\n\n        if (null !== $nextSelect) {\n          $currentSelect.after($nextSelect);\n          $currentSelect = $nextSelect;\n        }\n      });\n\n      // Hide the original.\n      that.$element.hide();\n    },\n\n    /**\n     * Destroy CSHS.\n     */\n    destroy: function () {\n      this.selectOptions = [];\n      this.$element.show().nextAll('.select-wrapper').remove();\n    },\n\n    /**\n     * Given an array of options, build an HTML select element.\n     *\n     * @param {HTMLElement[]|HTMLOptionElement[]} options\n     *   List of options.\n     * @param {String} [parent]\n     *   Parent option.\n     * @param {Number} [level]\n     *   Nesting level.\n     *\n     * @return {jQuery|null}\n     *   Newly created element.\n     */\n    createSelect: function (options, parent, level) {\n      if (!options || options.length < 1) {\n        return null;\n      }\n\n      parent = parent || this.settings.noneValue;\n      level = level || 0;\n\n      const wrapperClasses = [\n        'select-wrapper',\n        'relative',\n      ];\n\n      const chevronClasses = [\n        'pointer-events-none',\n        'absolute',\n        'inset-y-0',\n        'right-0',\n        'flex',\n        'items-center',\n        'px-2',\n      ];\n\n      const chevronElement = `\n      <div class=\"${chevronClasses.join(' ')}\">\n      ${chevronDown}\n      </div>\n      `;\n\n      const selectClasses = [\n        'simpler-select',\n        'w-full',\n      ];\n\n      const selectElement = `<select class=\"${selectClasses.join(' ')}\">`\n\n      var that = this;\n      var $select = $(selectElement).addClass(that.$element.attr('class'));\n      var $wrapper = $(`<div class=\"${wrapperClasses.join(' ')}\">`);\n\n      if (that.$element.hasClass('error')) {\n        $select.addClass('error');\n      }\n\n      // Always add the \"_none\" option.\n      $select.append('<option value=\"' + that.settings.noneValue + '\" data-parent-value=\"' + parent + '\">' + that.settings.noneLabel + '</option>');\n\n      $.each(options, function (i, option) {\n        // Do not add \"_none\" option (already added by code above).\n        if (option.value != that.settings.noneValue) {\n          var $option = $('<option>')\n            .val(option.value)\n            // Remove dashes from the beginning, then set the label.\n            .text(option.label.replace(/(- )+/, ''));\n\n          if (option.children.length) {\n            $option.addClass('has-children');\n          }\n\n          $select.append($option);\n        }\n      });\n\n      $select.change(function () {\n        that.$currentSelect = $(this);\n        // Remove deeper selects.\n        that.selectRemoveNext(that.$currentSelect);\n\n        // Get the selected value and also set the original drop-down.\n        var $selected = that.$currentSelect.find('option:selected');\n        var selectedValue = $selected.val();\n        var parentValue = $selected.data('parent-value');\n\n        if (undefined === parentValue) {\n          parentValue = selectedValue;\n        }\n\n        that.$element\n          .val(parentValue)\n          .change();\n\n        if (selectedValue == that.settings.noneValue) {\n          return;\n        }\n\n        // Build new child select.\n        var optionInfo = that.getOptionInfoByValue(selectedValue);\n\n        if (undefined !== optionInfo.children) {\n          that.addSelectAfter(that.createSelect(optionInfo.children, selectedValue, that.selectGetLevel()));\n        }\n      });\n\n      if (that.settings.labels[level]) {\n        $wrapper.append('<label>' + that.settings.labels[level] + '</label>');\n      }\n\n      $wrapper.append($select);\n      $wrapper.append(chevronElement);\n\n      return $wrapper;\n    },\n\n    /**\n     * Given an flat array an tree is built.\n     *\n     * @param {Object[]} array\n     *   Options list.\n     * @param {Object} [parent]\n     *   Parent option.\n     * @param {Array} [tree]\n     *   Existing options.\n     *\n     * @return {Array}\n     *   Options tree.\n     */\n    buildTree: function (array, parent, tree) {\n      tree = tree || [];\n      parent = parent || { value: 0 };\n\n      var children = $.grep(array, function (child) {\n        // Here must be no strict comparison!\n        return undefined !== child && child.parent == parent.value;\n      });\n\n      if (children.length) {\n        if (0 == parent.value) {\n          tree = children;\n        }\n        else {\n          parent.children = children;\n        }\n\n        for (var i = 0; i < children.length; i++) {\n          this.buildTree(array, children[i], tree);\n        }\n      }\n\n      return tree;\n    },\n\n    /**\n     * Set the value of a select to the given.\n     *\n     * @param {jQuery} $select\n     *   Wrapper element.\n     * @param {String} value\n     *   New value to set.\n     */\n    selectSetValue: function ($select, value) {\n      $select.find('select').val(value);\n    },\n\n    /**\n     * Remove all following selects.\n     */\n    selectRemoveNext: function () {\n      this.$currentSelect\n        .parents('.select-wrapper')\n        .nextAll('.select-wrapper')\n        .remove();\n    },\n\n    /**\n     * Add a newSelect after the currentSelect.\n     *\n     * @param {jQuery} $newSelect\n     *   New \"select\" element.\n     */\n    addSelectAfter: function ($newSelect) {\n      this.$currentSelect.parents('.select-wrapper').after($newSelect);\n    },\n\n    /**\n     * Get the hierarchy level of given select.\n     *\n     * @return {Number}\n     *   Number of wrappers.\n     */\n    selectGetLevel: function () {\n      return this.$currentSelect.parents('.form-type-cshs').find('.select-wrapper').length;\n    },\n\n    /**\n     * Given a value build an array of all parents (from leave to root).\n     *\n     * @param {String} value\n     *   Value of option.\n     * @param {Array} [parents]\n     *   Parent options.\n     *\n     * @return {Array}\n     *   Updated parent options list.\n     */\n    getAllParents: function (value, parents) {\n      if (value == this.settings.noneValue) {\n        return [];\n      }\n\n      parents = parents || [];\n\n      var parent = this.getOptionByValue(value).data('parent');\n\n      if (undefined !== parent && 0 != parent) {\n        parents.push(parent);\n        this.getAllParents(this.getOptionByValue(parent).val(), parents);\n      }\n\n      return parents;\n    },\n\n    /**\n     * Tiny helper to get the option jQuery object.\n     *\n     * @param {String} value\n     *   Value of an option.\n     *\n     * @return {jQuery}\n     *   Element.\n     */\n    getOptionByValue: function (value) {\n      return this.$element.find('option[value=\"' + value + '\"]');\n    },\n\n    /**\n     * Helper to get the info-object which corresponds to an option value.\n     *\n     * @param {String} value\n     *   Value of an option.\n     *\n     * @return {Object}\n     *   Element.\n     */\n    getOptionInfoByValue: function (value) {\n      var optionInfo = {};\n\n      $.each(this.selectOptions, function (idx, option) {\n        if (option.value == value) {\n          optionInfo = option;\n          return false;\n        }\n      });\n\n      return optionInfo;\n    }\n  };\n\n  // A really lightweight plugin wrapper around the constructor,\n  // preventing against multiple instantiations.\n  $.fn[pluginName] = function (options) {\n    this.each(function () {\n      if (!$.data(this, 'plugin_' + pluginName)) {\n        $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n      }\n    });\n\n    return this;\n  };\n})(jQuery, 'simplerSelect');\n","/**\n * @file\n * Provide dragging capabilities to admin uis.\n */\n\n/**\n * Triggers when weights columns are toggled.\n *\n * @event columnschange\n */\nimport move from '../../icons/move.svg';\nimport info from '../../icons/info.svg';\n\n(function ($, Drupal, drupalSettings) {\n  /**\n   * Store the state of weight columns display for all tables.\n   *\n   * Default value is to hide weight columns.\n   */\n  let showWeight = JSON.parse(\n    localStorage.getItem('Drupal.tableDrag.showWeight'),\n  );\n\n  /**\n   * Drag and drop table rows with field manipulation.\n   *\n   * Using the drupal_attach_tabledrag() function, any table with weights or\n   * parent relationships may be made into draggable tables. Columns containing\n   * a field may optionally be hidden, providing a better user experience.\n   *\n   * Created tableDrag instances may be modified with custom behaviors by\n   * overriding the .onDrag, .onDrop, .row.onSwap, and .row.onIndent methods.\n   * See blocks.js for an example of adding additional functionality to\n   * tableDrag.\n   *\n   * @type {Drupal~behavior}\n   */\n  Drupal.behaviors.tableDrag = {\n    attach(context, settings) {\n      function initTableDrag(table, base) {\n        if (table.length) {\n          // Create the new tableDrag instance. Save in the Drupal variable\n          // to allow other scripts access to the object.\n          Drupal.tableDrag[base] = new Drupal.tableDrag(\n            table[0],\n            settings.tableDrag[base],\n          );\n        }\n      }\n\n      Object.keys(settings.tableDrag || {}).forEach(base => {\n        initTableDrag(\n          $(context)\n            .find(`#${base}`)\n            .once('tabledrag'),\n          base,\n        );\n      });\n    },\n  };\n\n  /**\n   * Provides table and field manipulation.\n   *\n   * @constructor\n   *\n   * @param {HTMLElement} table\n   *   DOM object for the table to be made draggable.\n   * @param {object} tableSettings\n   *   Settings for the table added via drupal_add_dragtable().\n   */\n  Drupal.tableDrag = function (table, tableSettings) {\n    const self = this;\n    const $table = $(table);\n\n    /**\n     * @type {jQuery}\n     */\n    this.$table = $(table);\n\n    /**\n     *\n     * @type {HTMLElement}\n     */\n    this.table = table;\n\n    /**\n     * @type {object}\n     */\n    this.tableSettings = tableSettings;\n\n    /**\n     * Used to hold information about a current drag operation.\n     *\n     * @type {?HTMLElement}\n     */\n    this.dragObject = null;\n\n    /**\n     * Provides operations for row manipulation.\n     *\n     * @type {?HTMLElement}\n     */\n    this.rowObject = null;\n\n    /**\n     * Remember the previous element.\n     *\n     * @type {?HTMLElement}\n     */\n    this.oldRowElement = null;\n\n    /**\n     * Used to determine up or down direction from last mouse move.\n     *\n     * @type {number}\n     */\n    this.oldY = 0;\n\n    /**\n     * Whether anything in the entire table has changed.\n     *\n     * @type {bool}\n     */\n    this.changed = false;\n\n    /**\n     * Maximum amount of allowed parenting.\n     *\n     * @type {number}\n     */\n    this.maxDepth = 0;\n\n    /**\n     * Direction of the table.\n     *\n     * @type {number}\n     */\n    this.rtl = $(this.table).css('direction') === 'rtl' ? -1 : 1;\n\n    /**\n     *\n     * @type {bool}\n     */\n    this.striping = $(this.table).data('striping') === 1;\n\n    /**\n     * Configure the scroll settings.\n     *\n     * @type {object}\n     *\n     * @prop {number} amount\n     * @prop {number} interval\n     * @prop {number} trigger\n     */\n    this.scrollSettings = { amount: 4, interval: 50, trigger: 70 };\n\n    /**\n     *\n     * @type {?number}\n     */\n    this.scrollInterval = null;\n\n    /**\n     *\n     * @type {number}\n     */\n    this.scrollY = 0;\n\n    /**\n     *\n     * @type {number}\n     */\n    this.windowHeight = 0;\n\n    /**\n     * Check this table's settings for parent relationships.\n     *\n     * For efficiency, large sections of code can be skipped if we don't need to\n     * track horizontal movement and indentations.\n     *\n     * @type {bool}\n     */\n    this.indentEnabled = false;\n    Object.keys(tableSettings || {}).forEach(group => {\n      Object.keys(tableSettings[group] || {}).forEach(n => {\n        if (tableSettings[group][n].relationship === 'parent') {\n          this.indentEnabled = true;\n        }\n        if (tableSettings[group][n].limit > 0) {\n          this.maxDepth = tableSettings[group][n].limit;\n        }\n      });\n    });\n    if (this.indentEnabled) {\n      /**\n       * Total width of indents, set in makeDraggable.\n       *\n       * @type {number}\n       */\n      this.indentCount = 1;\n      // Find the width of indentations to measure mouse movements against.\n      // Because the table doesn't need to start with any indentations, we\n      // manually append 2 indentations in the first draggable row, measure\n      // the offset, then remove.\n      const indent = Drupal.theme('tableDragIndentation');\n      const testRow = $('<tr/>')\n        .addClass('draggable')\n        .appendTo(table);\n      const testCell = $('<td/>')\n        .appendTo(testRow)\n        .prepend(indent)\n        .prepend(indent);\n      const $indentation = testCell.find('.js-indentation');\n\n      /**\n       *\n       * @type {number}\n       */\n      this.indentAmount =\n        $indentation.get(1).offsetLeft - $indentation.get(0).offsetLeft;\n      testRow.remove();\n    }\n\n    // Make each applicable row draggable.\n    // Match immediate children of the parent element to allow nesting.\n    $table.find('> tr.draggable, > tbody > tr.draggable').each(function () {\n      self.makeDraggable(this);\n    });\n\n    const buttonClasses = [\n      'tabledrag-toggle-weight',\n      'ml-auto',\n      'bg-cyan-500',\n      'appearance-none',\n      'border',\n      'border-cyan-800',\n      'rounded',\n      'py-2',\n      'px-4',\n      'text-white',\n      'leading-tight',\n      'focus:outline-none',\n      'focus:bg-cyan-600',\n      'focus:border-cyan-800',\n      'hover:border-cyan-500'\n    ];\n\n    // Add a link before the table for users to show or hide weight columns.\n    $table.before(\n      $(`<button type=\"button\" class=\"${buttonClasses.join(' ')}\"></button>`)\n        .attr(\n          'title',\n          Drupal.t('Re-order rows by numerical weight instead of dragging.'),\n        )\n        .on(\n          'click',\n          $.proxy(function (e) {\n            e.preventDefault();\n            this.toggleColumns();\n          }, this),\n        )\n        .wrap('<div class=\"flex flex-col items-end my-2\"></div>')\n        .parent(),\n    );\n\n    // Initialize the specified columns (for example, weight or parent columns)\n    // to show or hide according to user preference. This aids accessibility\n    // so that, e.g., screen reader users can choose to enter weight values and\n    // manipulate form elements directly, rather than using drag-and-drop..\n    self.initColumns();\n\n    // Add event bindings to the document. The self variable is passed along\n    // as event handlers do not have direct access to the tableDrag object.\n    $(document).on('touchmove', event =>\n      self.dragRow(event.originalEvent.touches[0], self),\n    );\n    $(document).on('touchend', event =>\n      self.dropRow(event.originalEvent.touches[0], self),\n    );\n    $(document).on('mousemove pointermove', event => self.dragRow(event, self));\n    $(document).on('mouseup pointerup', event => self.dropRow(event, self));\n\n    // React to localStorage event showing or hiding weight columns.\n    $(window).on(\n      'storage',\n      $.proxy(function (e) {\n        // Only react to 'Drupal.tableDrag.showWeight' value change.\n        if (e.originalEvent.key === 'Drupal.tableDrag.showWeight') {\n          // This was changed in another window, get the new value for this\n          // window.\n          showWeight = JSON.parse(e.originalEvent.newValue);\n          this.displayColumns(showWeight);\n        }\n      }, this),\n    );\n  };\n\n  /**\n   * Initialize columns containing form elements to be hidden by default.\n   *\n   * Identify and mark each cell with a CSS class so we can easily toggle\n   * show/hide it. Finally, hide columns if user does not have a\n   * 'Drupal.tableDrag.showWeight' localStorage value.\n   */\n  Drupal.tableDrag.prototype.initColumns = function () {\n    const $table = this.$table;\n    let hidden;\n    let cell;\n    let columnIndex;\n    Object.keys(this.tableSettings || {}).forEach(group => {\n      // Find the first field in this group.\n      Object.keys(this.tableSettings[group]).some(tableSetting => {\n        const field = $table\n          .find(`.${this.tableSettings[group][tableSetting].target}`)\n          .eq(0);\n        if (field.length && this.tableSettings[group][tableSetting].hidden) {\n          hidden = this.tableSettings[group][tableSetting].hidden;\n          cell = field.closest('td');\n          return true;\n        }\n        return false;\n      });\n\n      // Mark the column containing this field so it can be hidden.\n      if (hidden && cell[0]) {\n        // Add 1 to our indexes. The nth-child selector is 1 based, not 0\n        // based. Match immediate children of the parent element to allow\n        // nesting.\n        columnIndex =\n          cell\n            .parent()\n            .find('> td')\n            .index(cell.get(0)) + 1;\n        $table\n          .find('> thead > tr, > tbody > tr, > tr')\n          .each(this.addColspanClass(columnIndex));\n      }\n    });\n    this.displayColumns(showWeight);\n  };\n\n  /**\n   * Mark cells that have colspan.\n   *\n   * In order to adjust the colspan instead of hiding them altogether.\n   *\n   * @param {number} columnIndex\n   *   The column index to add colspan class to.\n   *\n   * @return {function}\n   *   Function to add colspan class.\n   */\n  Drupal.tableDrag.prototype.addColspanClass = function (columnIndex) {\n    return function () {\n      // Get the columnIndex and adjust for any colspans in this row.\n      const $row = $(this);\n      let index = columnIndex;\n      const cells = $row.children();\n      let cell;\n      cells.each(function (n) {\n        if (n < index && this.colSpan && this.colSpan > 1) {\n          index -= this.colSpan - 1;\n        }\n      });\n      if (index > 0) {\n        cell = cells.filter(`:nth-child(${index})`);\n        if (cell[0].colSpan && cell[0].colSpan > 1) {\n          // If this cell has a colspan, mark it so we can reduce the colspan.\n          cell.addClass('tabledrag-has-colspan');\n        } else {\n          // Mark this cell so we can hide it.\n          cell.addClass('tabledrag-hide');\n        }\n      }\n    };\n  };\n\n  /**\n   * Hide or display weight columns. Triggers an event on change.\n   *\n   * @fires event:columnschange\n   *\n   * @param {bool} displayWeight\n   *   'true' will show weight columns.\n   */\n  Drupal.tableDrag.prototype.displayColumns = function (displayWeight) {\n    if (displayWeight) {\n      this.showColumns();\n    }\n    // Default action is to hide columns.\n    else {\n      this.hideColumns();\n    }\n    // Trigger an event to allow other scripts to react to this display change.\n    // Force the extra parameter as a bool.\n    $('table')\n      .findOnce('tabledrag')\n      .trigger('columnschange', !!displayWeight);\n  };\n\n  /**\n   * Toggle the weight column depending on 'showWeight' value.\n   *\n   * Store only default override.\n   */\n  Drupal.tableDrag.prototype.toggleColumns = function () {\n    showWeight = !showWeight;\n    this.displayColumns(showWeight);\n    if (showWeight) {\n      // Save default override.\n      localStorage.setItem('Drupal.tableDrag.showWeight', showWeight);\n    } else {\n      // Reset the value to its default.\n      localStorage.removeItem('Drupal.tableDrag.showWeight');\n    }\n  };\n\n  /**\n   * Hide the columns containing weight/parent form elements.\n   *\n   * Undo showColumns().\n   */\n  Drupal.tableDrag.prototype.hideColumns = function () {\n    const $tables = $('table').findOnce('tabledrag');\n    // Hide weight/parent cells and headers.\n    $tables.find('.tabledrag-hide').css('display', 'none');\n    // Show TableDrag handles.\n    $tables.find('.tabledrag-handle').css('display', '');\n    // Reduce the colspan of any effected multi-span columns.\n    $tables.find('.tabledrag-has-colspan').each(function () {\n      this.colSpan = this.colSpan - 1;\n    });\n    // Change link text.\n    $('.tabledrag-toggle-weight').text(Drupal.t('Show row weights'));\n  };\n\n  /**\n   * Show the columns containing weight/parent form elements.\n   *\n   * Undo hideColumns().\n   */\n  Drupal.tableDrag.prototype.showColumns = function () {\n    const $tables = $('table').findOnce('tabledrag');\n    // Show weight/parent cells and headers.\n    $tables.find('.tabledrag-hide').css('display', '');\n    // Hide TableDrag handles.\n    $tables.find('.tabledrag-handle').css('display', 'none');\n    // Increase the colspan for any columns where it was previously reduced.\n    $tables.find('.tabledrag-has-colspan').each(function () {\n      this.colSpan = this.colSpan + 1;\n    });\n    // Change link text.\n    $('.tabledrag-toggle-weight').text(Drupal.t('Hide row weights'));\n  };\n\n  /**\n   * Find the target used within a particular row and group.\n   *\n   * @param {string} group\n   *   Group selector.\n   * @param {HTMLElement} row\n   *   The row HTML element.\n   *\n   * @return {object}\n   *   The table row settings.\n   */\n  Drupal.tableDrag.prototype.rowSettings = function (group, row) {\n    const field = $(row).find(`.${group}`);\n    const tableSettingsGroup = this.tableSettings[group];\n    return Object.keys(tableSettingsGroup)\n      .map(delta => {\n        const targetClass = tableSettingsGroup[delta].target;\n        let rowSettings;\n        if (field.is(`.${targetClass}`)) {\n          // Return a copy of the row settings.\n          rowSettings = {};\n          Object.keys(tableSettingsGroup[delta]).forEach(n => {\n            rowSettings[n] = tableSettingsGroup[delta][n];\n          });\n        }\n        return rowSettings;\n      })\n      .filter(rowSetting => rowSetting)[0];\n  };\n\n  /**\n   * Take an item and add event handlers to make it become draggable.\n   *\n   * @param {HTMLElement} item\n   *   The item to add event handlers to.\n   */\n  Drupal.tableDrag.prototype.makeDraggable = function (item) {\n    const self = this;\n    const $item = $(item);\n    // Add a class to the title link.\n    $item\n      .find('td:first-of-type')\n      .find('a')\n      .addClass('menu-item__link');\n    // Create the handle.\n    const handleClasses = [\n      'tabledrag-handle',\n      'handle',\n      'cursor-move',\n      'align-middle',\n      'float-left'\n    ];\n    const handle = $(\n      `<span class=\"${handleClasses.join(' ')}\">${move}</span>`,\n    ).attr('title', Drupal.t('Drag to re-order'));\n    // Insert the handle after indentations (if any).\n    const $indentationLast = $item\n      .find('td:first-of-type')\n      .find('.js-indentation')\n      .eq(-1);\n    if ($indentationLast.length) {\n      $indentationLast.after(handle);\n      // Update the total width of indentation in this entire table.\n      self.indentCount = Math.max(\n        $item.find('.js-indentation').length,\n        self.indentCount,\n      );\n    } else {\n      $item\n        .find('td')\n        .eq(0)\n        .prepend(handle);\n    }\n\n    handle.on('mousedown touchstart pointerdown', event => {\n      event.preventDefault();\n      if (event.originalEvent.type === 'touchstart') {\n        event = event.originalEvent.touches[0];\n      }\n      self.dragStart(event, self, item);\n    });\n\n    // Prevent the anchor tag from jumping us to the top of the page.\n    handle.on('click', e => {\n      e.preventDefault();\n    });\n\n    // Set blur cleanup when a handle is focused.\n    handle.on('focus', () => {\n      self.safeBlur = true;\n    });\n\n    // On blur, fire the same function as a touchend/mouseup. This is used to\n    // update values after a row has been moved through the keyboard support.\n    handle.on('blur', event => {\n      if (self.rowObject && self.safeBlur) {\n        self.dropRow(event, self);\n      }\n    });\n\n    // Add arrow-key support to the handle.\n    handle.on('keydown', event => {\n      // If a rowObject doesn't yet exist and this isn't the tab key.\n      if (event.keyCode !== 9 && !self.rowObject) {\n        self.rowObject = new self.row(\n          item,\n          'keyboard',\n          self.indentEnabled,\n          self.maxDepth,\n          true,\n        );\n      }\n\n      let keyChange = false;\n      let groupHeight;\n\n      /* eslint-disable no-fallthrough */\n\n      switch (event.keyCode) {\n        // Left arrow.\n        case 37:\n        // Safari left arrow.\n        case 63234:\n          keyChange = true;\n          self.rowObject.indent(-1 * self.rtl);\n          break;\n\n        // Up arrow.\n        case 38:\n        // Safari up arrow.\n        case 63232: {\n          let $previousRow = $(self.rowObject.element).prev('tr:first-of-type');\n          let previousRow = $previousRow.get(0);\n          while (previousRow && $previousRow.is(':hidden')) {\n            $previousRow = $(previousRow).prev('tr:first-of-type');\n            previousRow = $previousRow.get(0);\n          }\n          if (previousRow) {\n            // Do not allow the onBlur cleanup.\n            self.safeBlur = false;\n            self.rowObject.direction = 'up';\n            keyChange = true;\n\n            if ($(item).is('.tabledrag-root')) {\n              // Swap with the previous top-level row.\n              groupHeight = 0;\n              while (\n                previousRow &&\n                $previousRow.find('.js-indentation').length\n              ) {\n                $previousRow = $(previousRow).prev('tr:first-of-type');\n                previousRow = $previousRow.get(0);\n                groupHeight += $previousRow.is(':hidden')\n                  ? 0\n                  : previousRow.offsetHeight;\n              }\n              if (previousRow) {\n                self.rowObject.swap('before', previousRow);\n                // No need to check for indentation, 0 is the only valid one.\n                window.scrollBy(0, -groupHeight);\n              }\n            } else if (\n              self.table.tBodies[0].rows[0] !== previousRow ||\n              $previousRow.is('.draggable')\n            ) {\n              // Swap with the previous row (unless previous row is the first\n              // one and undraggable).\n              self.rowObject.swap('before', previousRow);\n              self.rowObject.interval = null;\n              self.rowObject.indent(0);\n              window.scrollBy(0, -parseInt(item.offsetHeight, 10));\n            }\n            // Regain focus after the DOM manipulation.\n            handle.trigger('focus');\n          }\n          break;\n        }\n        // Right arrow.\n        case 39:\n        // Safari right arrow.\n        case 63235:\n          keyChange = true;\n          self.rowObject.indent(self.rtl);\n          break;\n\n        // Down arrow.\n        case 40:\n        // Safari down arrow.\n        case 63233: {\n          let $nextRow = $(self.rowObject.group)\n            .eq(-1)\n            .next('tr:first-of-type');\n          let nextRow = $nextRow.get(0);\n          while (nextRow && $nextRow.is(':hidden')) {\n            $nextRow = $(nextRow).next('tr:first-of-type');\n            nextRow = $nextRow.get(0);\n          }\n          if (nextRow) {\n            // Do not allow the onBlur cleanup.\n            self.safeBlur = false;\n            self.rowObject.direction = 'down';\n            keyChange = true;\n\n            if ($(item).is('.tabledrag-root')) {\n              // Swap with the next group (necessarily a top-level one).\n              groupHeight = 0;\n              const nextGroup = new self.row(\n                nextRow,\n                'keyboard',\n                self.indentEnabled,\n                self.maxDepth,\n                false,\n              );\n              if (nextGroup) {\n                $(nextGroup.group).each(function () {\n                  groupHeight += $(this).is(':hidden') ? 0 : this.offsetHeight;\n                });\n                const nextGroupRow = $(nextGroup.group)\n                  .eq(-1)\n                  .get(0);\n                self.rowObject.swap('after', nextGroupRow);\n                // No need to check for indentation, 0 is the only valid one.\n                window.scrollBy(0, parseInt(groupHeight, 10));\n              }\n            } else {\n              // Swap with the next row.\n              self.rowObject.swap('after', nextRow);\n              self.rowObject.interval = null;\n              self.rowObject.indent(0);\n              window.scrollBy(0, parseInt(item.offsetHeight, 10));\n            }\n            // Regain focus after the DOM manipulation.\n            handle.trigger('focus');\n          }\n          break;\n        }\n      }\n\n      /* eslint-enable no-fallthrough */\n\n      if (self.rowObject && self.rowObject.changed === true) {\n        $(item).addClass('drag');\n        if (self.oldRowElement) {\n          $(self.oldRowElement).removeClass('drag-previous');\n        }\n        self.oldRowElement = item;\n        if (self.striping === true) {\n          self.restripeTable();\n        }\n        self.onDrag();\n      }\n\n      // Returning false if we have an arrow key to prevent scrolling.\n      if (keyChange) {\n        return false;\n      }\n    });\n\n    // Compatibility addition, return false on keypress to prevent unwanted\n    // scrolling. IE and Safari will suppress scrolling on keydown, but all\n    // other browsers need to return false on keypress.\n    // http://www.quirksmode.org/js/keys.html\n    handle.on('keypress', event => {\n      /* eslint-disable no-fallthrough */\n\n      switch (event.keyCode) {\n        // Left arrow.\n        case 37:\n        // Up arrow.\n        case 38:\n        // Right arrow.\n        case 39:\n        // Down arrow.\n        case 40:\n          return false;\n      }\n\n      /* eslint-enable no-fallthrough */\n    });\n  };\n\n  /**\n   * Pointer event initiator, creates drag object and information.\n   *\n   * @param {jQuery.Event} event\n   *   The event object that trigger the drag.\n   * @param {Drupal.tableDrag} self\n   *   The drag handle.\n   * @param {HTMLElement} item\n   *   The item that that is being dragged.\n   */\n  Drupal.tableDrag.prototype.dragStart = function (event, self, item) {\n    // Create a new dragObject recording the pointer information.\n    self.dragObject = {};\n    self.dragObject.initOffset = self.getPointerOffset(item, event);\n    self.dragObject.initPointerCoords = self.pointerCoords(event);\n    if (self.indentEnabled) {\n      self.dragObject.indentPointerPos = self.dragObject.initPointerCoords;\n    }\n\n    // If there's a lingering row object from the keyboard, remove its focus.\n    if (self.rowObject) {\n      $(self.rowObject.element)\n        .find('a.tabledrag-handle')\n        .trigger('blur');\n    }\n\n    // Create a new rowObject for manipulation of this row.\n    self.rowObject = new self.row(\n      item,\n      'pointer',\n      self.indentEnabled,\n      self.maxDepth,\n      true,\n    );\n\n    // Save the position of the table.\n    self.table.topY = $(self.table).offset().top;\n    self.table.bottomY = self.table.topY + self.table.offsetHeight;\n\n    const dragClasses = [\n      'bg-cyan-100'\n    ];\n\n    // Add classes to the handle and row.\n    $(item).addClass(dragClasses.join(' '));\n\n    // Set the document to use the move cursor during drag.\n    $('body').addClass('drag');\n    if (self.oldRowElement) {\n      $(self.oldRowElement).removeClass('drag-previous');\n    }\n  };\n\n  /**\n   * Pointer movement handler, bound to document.\n   *\n   * @param {jQuery.Event} event\n   *   The pointer event.\n   * @param {Drupal.tableDrag} self\n   *   The tableDrag instance.\n   *\n   * @return {bool|undefined}\n   *   Undefined if no dragObject is defined, false otherwise.\n   */\n  Drupal.tableDrag.prototype.dragRow = function (event, self) {\n    if (self.dragObject) {\n      self.currentPointerCoords = self.pointerCoords(event);\n      const y = self.currentPointerCoords.y - self.dragObject.initOffset.y;\n      const x = self.currentPointerCoords.x - self.dragObject.initOffset.x;\n\n      // Check for row swapping and vertical scrolling.\n      if (y !== self.oldY) {\n        self.rowObject.direction = y > self.oldY ? 'down' : 'up';\n        // Update the old value.\n        self.oldY = y;\n        // Check if the window should be scrolled (and how fast).\n        const scrollAmount = self.checkScroll(self.currentPointerCoords.y);\n        // Stop any current scrolling.\n        clearInterval(self.scrollInterval);\n        // Continue scrolling if the mouse has moved in the scroll direction.\n        if (\n          (scrollAmount > 0 && self.rowObject.direction === 'down') ||\n          (scrollAmount < 0 && self.rowObject.direction === 'up')\n        ) {\n          self.setScroll(scrollAmount);\n        }\n\n        // If we have a valid target, perform the swap and restripe the table.\n        const currentRow = self.findDropTargetRow(x, y);\n        if (currentRow) {\n          if (self.rowObject.direction === 'down') {\n            self.rowObject.swap('after', currentRow, self);\n          } else {\n            self.rowObject.swap('before', currentRow, self);\n          }\n          if (self.striping === true) {\n            self.restripeTable();\n          }\n        }\n      }\n\n      // Similar to row swapping, handle indentations.\n      if (self.indentEnabled) {\n        const xDiff =\n          self.currentPointerCoords.x - self.dragObject.indentPointerPos.x;\n        // Set the number of indentations the pointer has been moved left or\n        // right.\n        const indentDiff = Math.round(xDiff / self.indentAmount);\n        // Indent the row with our estimated diff, which may be further\n        // restricted according to the rows around this row.\n        const indentChange = self.rowObject.indent(indentDiff);\n        // Update table and pointer indentations.\n        self.dragObject.indentPointerPos.x +=\n          self.indentAmount * indentChange * self.rtl;\n        self.indentCount = Math.max(self.indentCount, self.rowObject.indents);\n      }\n\n      return false;\n    }\n  };\n\n  /**\n   * Pointerup behavior.\n   *\n   * @param {jQuery.Event} event\n   *   The pointer event.\n   * @param {Drupal.tableDrag} self\n   *   The tableDrag instance.\n   */\n  Drupal.tableDrag.prototype.dropRow = function (event, self) {\n    let droppedRow;\n    let $droppedRow;\n\n    // Drop row functionality.\n    if (self.rowObject !== null) {\n      droppedRow = self.rowObject.element;\n      $droppedRow = $(droppedRow);\n      // The row is already in the right place so we just release it.\n      if (self.rowObject.changed === true) {\n        // Update the fields in the dropped row.\n        self.updateFields(droppedRow);\n\n        // If a setting exists for affecting the entire group, update all the\n        // fields in the entire dragged group.\n        Object.keys(self.tableSettings || {}).forEach(group => {\n          const rowSettings = self.rowSettings(group, droppedRow);\n          if (rowSettings.relationship === 'group') {\n            Object.keys(self.rowObject.children || {}).forEach(n => {\n              self.updateField(self.rowObject.children[n], group);\n            });\n          }\n        });\n\n        self.rowObject.markChanged();\n        if (self.changed === false) {\n          $(Drupal.theme('tableDragChangedWarning'))\n            .insertBefore(self.table)\n            .hide()\n            .fadeIn('slow');\n          self.changed = true;\n        }\n      }\n\n      if (self.indentEnabled) {\n        self.rowObject.removeIndentClasses();\n      }\n      if (self.oldRowElement) {\n        $(self.oldRowElement).removeClass('drag-previous');\n      }\n      $droppedRow.removeClass('drag').addClass('drag-previous');\n      self.oldRowElement = droppedRow;\n      self.onDrop();\n      self.rowObject = null;\n    }\n\n    // Functionality specific only to pointerup events.\n    if (self.dragObject !== null) {\n      self.dragObject = null;\n      $('body').removeClass('drag');\n      clearInterval(self.scrollInterval);\n    }\n  };\n\n  /**\n   * Get the coordinates from the event (allowing for browser differences).\n   *\n   * @param {jQuery.Event} event\n   *   The pointer event.\n   *\n   * @return {object}\n   *   An object with `x` and `y` keys indicating the position.\n   */\n  Drupal.tableDrag.prototype.pointerCoords = function (event) {\n    if (event.pageX || event.pageY) {\n      return { x: event.pageX, y: event.pageY };\n    }\n    return {\n      x: event.clientX + document.body.scrollLeft - document.body.clientLeft,\n      y: event.clientY + document.body.scrollTop - document.body.clientTop,\n    };\n  };\n\n  /**\n   * Get the event offset from the target element.\n   *\n   * Given a target element and a pointer event, get the event offset from that\n   * element. To do this we need the element's position and the target position.\n   *\n   * @param {HTMLElement} target\n   *   The target HTML element.\n   * @param {jQuery.Event} event\n   *   The pointer event.\n   *\n   * @return {object}\n   *   An object with `x` and `y` keys indicating the position.\n   */\n  Drupal.tableDrag.prototype.getPointerOffset = function (target, event) {\n    const docPos = $(target).offset();\n    const pointerPos = this.pointerCoords(event);\n    return { x: pointerPos.x - docPos.left, y: pointerPos.y - docPos.top };\n  };\n\n  /**\n   * Find the row the mouse is currently over.\n   *\n   * This row is then taken and swapped with the one being dragged.\n   *\n   * @param {number} x\n   *   The x coordinate of the mouse on the page (not the screen).\n   * @param {number} y\n   *   The y coordinate of the mouse on the page (not the screen).\n   *\n   * @return {*}\n   *   The drop target row, if found.\n   */\n  Drupal.tableDrag.prototype.findDropTargetRow = function (x, y) {\n    const rows = $(this.table.tBodies[0].rows).not(':hidden');\n    for (let n = 0; n < rows.length; n++) {\n      let row = rows[n];\n      let $row = $(row);\n      const rowY = $row.offset().top;\n      let rowHeight;\n      // Because Safari does not report offsetHeight on table rows, but does on\n      // table cells, grab the firstChild of the row and use that instead.\n      // http://jacob.peargrove.com/blog/2006/technical/table-row-offsettop-bug-in-safari.\n      if (row.offsetHeight === 0) {\n        rowHeight = parseInt(row.firstChild.offsetHeight, 10) / 2;\n      }\n      // Other browsers.\n      else {\n        rowHeight = parseInt(row.offsetHeight, 10) / 2;\n      }\n\n      // Because we always insert before, we need to offset the height a bit.\n      if (y > rowY - rowHeight && y < rowY + rowHeight) {\n        if (this.indentEnabled) {\n          // Check that this row is not a child of the row being dragged.\n          if (\n            Object.keys(this.rowObject.group).some(\n              o => this.rowObject.group[o] === row,\n            )\n          ) {\n            return null;\n          }\n        }\n        // Do not allow a row to be swapped with itself.\n        else if (row === this.rowObject.element) {\n          return null;\n        }\n\n        // Check that swapping with this row is allowed.\n        if (!this.rowObject.isValidSwap(row)) {\n          return null;\n        }\n\n        // We may have found the row the mouse just passed over, but it doesn't\n        // take into account hidden rows. Skip backwards until we find a\n        // draggable row.\n        while ($row.is(':hidden') && $row.prev('tr').is(':hidden')) {\n          $row = $row.prev('tr:first-of-type');\n          row = $row.get(0);\n        }\n        return row;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * After the row is dropped, update the table fields.\n   *\n   * @param {HTMLElement} changedRow\n   *   DOM object for the row that was just dropped.\n   */\n  Drupal.tableDrag.prototype.updateFields = function (changedRow) {\n    Object.keys(this.tableSettings || {}).forEach(group => {\n      // Each group may have a different setting for relationship, so we find\n      // the source rows for each separately.\n      this.updateField(changedRow, group);\n    });\n  };\n\n  /**\n   * After the row is dropped, update a single table field.\n   *\n   * @param {HTMLElement} changedRow\n   *   DOM object for the row that was just dropped.\n   * @param {string} group\n   *   The settings group on which field updates will occur.\n   */\n  Drupal.tableDrag.prototype.updateField = function (changedRow, group) {\n    let rowSettings = this.rowSettings(group, changedRow);\n    const $changedRow = $(changedRow);\n    let sourceRow;\n    let $previousRow;\n    let previousRow;\n    let useSibling;\n    // Set the row as its own target.\n    if (\n      rowSettings.relationship === 'self' ||\n      rowSettings.relationship === 'group'\n    ) {\n      sourceRow = changedRow;\n    }\n    // Siblings are easy, check previous and next rows.\n    else if (rowSettings.relationship === 'sibling') {\n      $previousRow = $changedRow.prev('tr:first-of-type');\n      previousRow = $previousRow.get(0);\n      const $nextRow = $changedRow.next('tr:first-of-type');\n      const nextRow = $nextRow.get(0);\n      sourceRow = changedRow;\n      if (\n        $previousRow.is('.draggable') &&\n        $previousRow.find(`.${group}`).length\n      ) {\n        if (this.indentEnabled) {\n          if (\n            $previousRow.find('.js-indentations').length ===\n            $changedRow.find('.js-indentations').length\n          ) {\n            sourceRow = previousRow;\n          }\n        } else {\n          sourceRow = previousRow;\n        }\n      } else if (\n        $nextRow.is('.draggable') &&\n        $nextRow.find(`.${group}`).length\n      ) {\n        if (this.indentEnabled) {\n          if (\n            $nextRow.find('.js-indentations').length ===\n            $changedRow.find('.js-indentations').length\n          ) {\n            sourceRow = nextRow;\n          }\n        } else {\n          sourceRow = nextRow;\n        }\n      }\n    }\n    // Parents, look up the tree until we find a field not in this group.\n    // Go up as many parents as indentations in the changed row.\n    else if (rowSettings.relationship === 'parent') {\n      $previousRow = $changedRow.prev('tr');\n      previousRow = $previousRow;\n      while (\n        $previousRow.length &&\n        $previousRow.find('.js-indentation').length >= this.rowObject.indents\n      ) {\n        $previousRow = $previousRow.prev('tr');\n        previousRow = $previousRow;\n      }\n      // If we found a row.\n      if ($previousRow.length) {\n        sourceRow = $previousRow.get(0);\n      }\n      // Otherwise we went all the way to the left of the table without finding\n      // a parent, meaning this item has been placed at the root level.\n      else {\n        // Use the first row in the table as source, because it's guaranteed to\n        // be at the root level. Find the first item, then compare this row\n        // against it as a sibling.\n        sourceRow = $(this.table)\n          .find('tr.draggable:first-of-type')\n          .get(0);\n        if (sourceRow === this.rowObject.element) {\n          sourceRow = $(this.rowObject.group[this.rowObject.group.length - 1])\n            .next('tr.draggable')\n            .get(0);\n        }\n        useSibling = true;\n      }\n    }\n\n    // Because we may have moved the row from one category to another,\n    // take a look at our sibling and borrow its sources and targets.\n    this.copyDragClasses(sourceRow, changedRow, group);\n    rowSettings = this.rowSettings(group, changedRow);\n\n    // In the case that we're looking for a parent, but the row is at the top\n    // of the tree, copy our sibling's values.\n    if (useSibling) {\n      rowSettings.relationship = 'sibling';\n      rowSettings.source = rowSettings.target;\n    }\n\n    const targetClass = `.${rowSettings.target}`;\n    const targetElement = $changedRow.find(targetClass).get(0);\n\n    // Check if a target element exists in this row.\n    if (targetElement) {\n      const sourceClass = `.${rowSettings.source}`;\n      const sourceElement = $(sourceClass, sourceRow).get(0);\n      switch (rowSettings.action) {\n        case 'depth':\n          // Get the depth of the target row.\n          targetElement.value = $(sourceElement)\n            .closest('tr')\n            .find('.js-indentation').length;\n          break;\n\n        case 'match':\n          // Update the value.\n          targetElement.value = sourceElement.value;\n          break;\n\n        case 'order': {\n          const siblings = this.rowObject.findSiblings(rowSettings);\n          if ($(targetElement).is('select')) {\n            // Get a list of acceptable values.\n            const values = [];\n            $(targetElement)\n              .find('option')\n              .each(function () {\n                values.push(this.value);\n              });\n            const maxVal = values[values.length - 1];\n            // Populate the values in the siblings.\n            $(siblings)\n              .find(targetClass)\n              .each(function () {\n                // If there are more items than possible values, assign the\n                // maximum value to the row.\n                if (values.length > 0) {\n                  this.value = values.shift();\n                } else {\n                  this.value = maxVal;\n                }\n              });\n          } else {\n            // Assume a numeric input field.\n            let weight =\n              parseInt(\n                $(siblings[0])\n                  .find(targetClass)\n                  .val(),\n                10,\n              ) || 0;\n            $(siblings)\n              .find(targetClass)\n              .each(function () {\n                this.value = weight;\n                weight++;\n              });\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  /**\n   * Copy all tableDrag related classes from one row to another.\n   *\n   * Copy all special tableDrag classes from one row's form elements to a\n   * different one, removing any special classes that the destination row\n   * may have had.\n   *\n   * @param {HTMLElement} sourceRow\n   *   The element for the source row.\n   * @param {HTMLElement} targetRow\n   *   The element for the target row.\n   * @param {string} group\n   *   The group selector.\n   */\n  Drupal.tableDrag.prototype.copyDragClasses = function (\n    sourceRow,\n    targetRow,\n    group,\n  ) {\n    const sourceElement = $(sourceRow).find(`.${group}`);\n    const targetElement = $(targetRow).find(`.${group}`);\n    if (sourceElement.length && targetElement.length) {\n      targetElement[0].className = sourceElement[0].className;\n    }\n  };\n\n  /**\n   * Check the suggested scroll of the table.\n   *\n   * @param {number} cursorY\n   *   The Y position of the cursor.\n   *\n   * @return {number}\n   *   The suggested scroll.\n   */\n  Drupal.tableDrag.prototype.checkScroll = function (cursorY) {\n    const de = document.documentElement;\n    const b = document.body;\n\n    const windowHeight =\n      window.innerHeight ||\n      (de.clientHeight && de.clientWidth !== 0\n        ? de.clientHeight\n        : b.offsetHeight);\n    this.windowHeight = windowHeight;\n    let scrollY;\n    if (document.all) {\n      scrollY = !de.scrollTop ? b.scrollTop : de.scrollTop;\n    } else {\n      scrollY = window.pageYOffset ? window.pageYOffset : window.scrollY;\n    }\n    this.scrollY = scrollY;\n    const trigger = this.scrollSettings.trigger;\n    let delta = 0;\n\n    // Return a scroll speed relative to the edge of the screen.\n    if (cursorY - scrollY > windowHeight - trigger) {\n      delta = trigger / (windowHeight + scrollY - cursorY);\n      delta = delta > 0 && delta < trigger ? delta : trigger;\n      return delta * this.scrollSettings.amount;\n    }\n    if (cursorY - scrollY < trigger) {\n      delta = trigger / (cursorY - scrollY);\n      delta = delta > 0 && delta < trigger ? delta : trigger;\n      return -delta * this.scrollSettings.amount;\n    }\n  };\n\n  /**\n   * Set the scroll for the table.\n   *\n   * @param {number} scrollAmount\n   *   The amount of scroll to apply to the window.\n   */\n  Drupal.tableDrag.prototype.setScroll = function (scrollAmount) {\n    const self = this;\n\n    this.scrollInterval = setInterval(() => {\n      // Update the scroll values stored in the object.\n      self.checkScroll(self.currentPointerCoords.y);\n      const aboveTable = self.scrollY > self.table.topY;\n      const belowTable = self.scrollY + self.windowHeight < self.table.bottomY;\n      if (\n        (scrollAmount > 0 && belowTable) ||\n        (scrollAmount < 0 && aboveTable)\n      ) {\n        window.scrollBy(0, scrollAmount);\n      }\n    }, this.scrollSettings.interval);\n  };\n\n  /**\n   * Command to restripe table properly.\n   */\n  Drupal.tableDrag.prototype.restripeTable = function () {\n    // :even and :odd are reversed because jQuery counts from 0 and\n    // we count from 1, so we're out of sync.\n    // Match immediate children of the parent element to allow nesting.\n    $(this.table)\n      .find('> tbody > tr.draggable, > tr.draggable')\n      .filter(':visible')\n      .filter(':odd')\n      .removeClass('odd')\n      .addClass('even')\n      .end()\n      .filter(':even')\n      .removeClass('even')\n      .addClass('odd');\n  };\n\n  /**\n   * Stub function. Allows a custom handler when a row begins dragging.\n   *\n   * @return {null}\n   *   Returns null when the stub function is used.\n   */\n  Drupal.tableDrag.prototype.onDrag = function () {\n    return null;\n  };\n\n  /**\n   * Stub function. Allows a custom handler when a row is dropped.\n   *\n   * @return {null}\n   *   Returns null when the stub function is used.\n   */\n  Drupal.tableDrag.prototype.onDrop = function () {\n    return null;\n  };\n\n  /**\n   * Constructor to make a new object to manipulate a table row.\n   *\n   * @param {HTMLElement} tableRow\n   *   The DOM element for the table row we will be manipulating.\n   * @param {string} method\n   *   The method in which this row is being moved. Either 'keyboard' or\n   *   'mouse'.\n   * @param {bool} indentEnabled\n   *   Whether the containing table uses indentations. Used for optimizations.\n   * @param {number} maxDepth\n   *   The maximum amount of indentations this row may contain.\n   * @param {bool} addClasses\n   *   Whether we want to add classes to this row to indicate child\n   *   relationships.\n   */\n  Drupal.tableDrag.prototype.row = function (\n    tableRow,\n    method,\n    indentEnabled,\n    maxDepth,\n    addClasses,\n  ) {\n    const $tableRow = $(tableRow);\n\n    this.element = tableRow;\n    this.method = method;\n    this.group = [tableRow];\n    this.groupDepth = $tableRow.find('.js-indentation').length;\n    this.changed = false;\n    this.table = $tableRow.closest('table')[0];\n    this.indentEnabled = indentEnabled;\n    this.maxDepth = maxDepth;\n    // Direction the row is being moved.\n    this.direction = '';\n    if (this.indentEnabled) {\n      this.indents = $tableRow.find('.js-indentation').length;\n      this.children = this.findChildren(addClasses);\n      this.group = $.merge(this.group, this.children);\n      // Find the depth of this entire group.\n      for (let n = 0; n < this.group.length; n++) {\n        this.groupDepth = Math.max(\n          $(this.group[n]).find('.js-indentation').length,\n          this.groupDepth,\n        );\n      }\n    }\n  };\n\n  /**\n   * Find all children of rowObject by indentation.\n   *\n   * @param {bool} addClasses\n   *   Whether we want to add classes to this row to indicate child\n   *   relationships.\n   *\n   * @return {Array}\n   *   An array of children of the row.\n   */\n  Drupal.tableDrag.prototype.row.prototype.findChildren = function (addClasses) {\n    const parentIndentation = this.indents;\n    let currentRow = $(this.element, this.table).next('tr.draggable');\n    const rows = [];\n    let child = 0;\n\n    function rowIndentation(indentNum, el) {\n      const self = $(el);\n      if (child === 1 && indentNum === parentIndentation) {\n        self.addClass('tree-child-first');\n      }\n      if (indentNum === parentIndentation) {\n        self.addClass('tree-child');\n      } else if (indentNum > parentIndentation) {\n        self.addClass('tree-child-horizontal');\n      }\n    }\n\n    while (currentRow.length) {\n      // A greater indentation indicates this is a child.\n      if (currentRow.find('.js-indentation').length > parentIndentation) {\n        child++;\n        rows.push(currentRow[0]);\n        if (addClasses) {\n          currentRow.find('.js-indentation').each(rowIndentation);\n        }\n      } else {\n        break;\n      }\n      currentRow = currentRow.next('tr.draggable');\n    }\n    if (addClasses && rows.length) {\n      $(rows[rows.length - 1])\n        .find(`.js-indentation:nth-child(${parentIndentation + 1})`)\n        .addClass('tree-child-last');\n    }\n    return rows;\n  };\n\n  /**\n   * Ensure that two rows are allowed to be swapped.\n   *\n   * @param {HTMLElement} row\n   *   DOM object for the row being considered for swapping.\n   *\n   * @return {bool}\n   *   Whether the swap is a valid swap or not.\n   */\n  Drupal.tableDrag.prototype.row.prototype.isValidSwap = function (row) {\n    const $row = $(row);\n    if (this.indentEnabled) {\n      let prevRow;\n      let nextRow;\n      if (this.direction === 'down') {\n        prevRow = row;\n        nextRow = $row.next('tr').get(0);\n      } else {\n        prevRow = $row.prev('tr').get(0);\n        nextRow = row;\n      }\n      this.interval = this.validIndentInterval(prevRow, nextRow);\n\n      // We have an invalid swap if the valid indentations interval is empty.\n      if (this.interval.min > this.interval.max) {\n        return false;\n      }\n    }\n\n    // Do not let an un-draggable first row have anything put before it.\n    if (this.table.tBodies[0].rows[0] === row && $row.is(':not(.draggable)')) {\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Perform the swap between two rows.\n   *\n   * @param {string} position\n   *   Whether the swap will occur 'before' or 'after' the given row.\n   * @param {HTMLElement} row\n   *   DOM element what will be swapped with the row group.\n   */\n  Drupal.tableDrag.prototype.row.prototype.swap = function (position, row) {\n    // Makes sure only DOM object are passed to Drupal.detachBehaviors().\n    this.group.forEach(row => {\n      Drupal.detachBehaviors(row, drupalSettings, 'move');\n    });\n    $(row)[position](this.group);\n    // Makes sure only DOM object are passed to Drupal.attachBehaviors()s.\n    this.group.forEach(row => {\n      Drupal.attachBehaviors(row, drupalSettings);\n    });\n    this.changed = true;\n    this.onSwap(row);\n  };\n\n  /**\n   * Determine the valid indentations interval for the row at a given position.\n   *\n   * @param {?HTMLElement} prevRow\n   *   DOM object for the row before the tested position\n   *   (or null for first position in the table).\n   * @param {?HTMLElement} nextRow\n   *   DOM object for the row after the tested position\n   *   (or null for last position in the table).\n   *\n   * @return {object}\n   *   An object with the keys `min` and `max` to indicate the valid indent\n   *   interval.\n   */\n  Drupal.tableDrag.prototype.row.prototype.validIndentInterval = function (\n    prevRow,\n    nextRow,\n  ) {\n    const $prevRow = $(prevRow);\n    let maxIndent;\n\n    // Minimum indentation:\n    // Do not orphan the next row.\n    const minIndent = nextRow ? $(nextRow).find('.js-indentation').length : 0;\n\n    // Maximum indentation:\n    if (\n      !prevRow ||\n      $prevRow.is(':not(.draggable)') ||\n      $(this.element).is('.tabledrag-root')\n    ) {\n      // Do not indent:\n      // - the first row in the table,\n      // - rows dragged below a non-draggable row,\n      // - 'root' rows.\n      maxIndent = 0;\n    } else {\n      // Do not go deeper than as a child of the previous row.\n      maxIndent =\n        $prevRow.find('.js-indentation').length +\n        ($prevRow.is('.tabledrag-leaf') ? 0 : 1);\n      // Limit by the maximum allowed depth for the table.\n      if (this.maxDepth) {\n        maxIndent = Math.min(\n          maxIndent,\n          this.maxDepth - (this.groupDepth - this.indents),\n        );\n      }\n    }\n\n    return { min: minIndent, max: maxIndent };\n  };\n\n  /**\n   * Indent a row within the legal bounds of the table.\n   *\n   * @param {number} indentDiff\n   *   The number of additional indentations proposed for the row (can be\n   *   positive or negative). This number will be adjusted to nearest valid\n   *   indentation level for the row.\n   *\n   * @return {number}\n   *   The number of indentations applied.\n   */\n  Drupal.tableDrag.prototype.row.prototype.indent = function (indentDiff) {\n    const $group = $(this.group);\n    // Determine the valid indentations interval if not available yet.\n    if (!this.interval) {\n      const prevRow = $(this.element)\n        .prev('tr')\n        .get(0);\n      const nextRow = $group\n        .eq(-1)\n        .next('tr')\n        .get(0);\n      this.interval = this.validIndentInterval(prevRow, nextRow);\n    }\n\n    // Adjust to the nearest valid indentation.\n    let indent = this.indents + indentDiff;\n    indent = Math.max(indent, this.interval.min);\n    indent = Math.min(indent, this.interval.max);\n    indentDiff = indent - this.indents;\n\n    for (let n = 1; n <= Math.abs(indentDiff); n++) {\n      // Add or remove indentations.\n      if (indentDiff < 0) {\n        $group.find('.js-indentation:first-of-type').remove();\n        this.indents--;\n      } else {\n        $group\n          .find('td:first-of-type')\n          .prepend(Drupal.theme('tableDragIndentation'));\n        this.indents++;\n      }\n    }\n    if (indentDiff) {\n      // Update indentation for this row.\n      this.changed = true;\n      this.groupDepth += indentDiff;\n      this.onIndent();\n    }\n\n    return indentDiff;\n  };\n\n  /**\n   * Find all siblings for a row.\n   *\n   * According to its subgroup or indentation. Note that the passed-in row is\n   * included in the list of siblings.\n   *\n   * @param {object} rowSettings\n   *   The field settings we're using to identify what constitutes a sibling.\n   *\n   * @return {Array}\n   *   An array of siblings.\n   */\n  Drupal.tableDrag.prototype.row.prototype.findSiblings = function (\n    rowSettings,\n  ) {\n    const siblings = [];\n    const directions = ['prev', 'next'];\n    const rowIndentation = this.indents;\n    let checkRowIndentation;\n    for (let d = 0; d < directions.length; d++) {\n      let checkRow = $(this.element)[directions[d]]();\n      while (checkRow.length) {\n        // Check that the sibling contains a similar target field.\n        if (checkRow.find(`.${rowSettings.target}`)) {\n          // Either add immediately if this is a flat table, or check to ensure\n          // that this row has the same level of indentation.\n          if (this.indentEnabled) {\n            checkRowIndentation = checkRow.find('.js-indentation').length;\n          }\n\n          if (!this.indentEnabled || checkRowIndentation === rowIndentation) {\n            siblings.push(checkRow[0]);\n          } else if (checkRowIndentation < rowIndentation) {\n            // No need to keep looking for siblings when we get to a parent.\n            break;\n          }\n        } else {\n          break;\n        }\n        checkRow = checkRow[directions[d]]();\n      }\n      // Since siblings are added in reverse order for previous, reverse the\n      // completed list of previous siblings. Add the current row and continue.\n      if (directions[d] === 'prev') {\n        siblings.reverse();\n        siblings.push(this.element);\n      }\n    }\n    return siblings;\n  };\n\n  /**\n   * Remove indentation helper classes from the current row group.\n   */\n  Drupal.tableDrag.prototype.row.prototype.removeIndentClasses = function () {\n    Object.keys(this.children || {}).forEach(n => {\n      $(this.children[n])\n        .find('.js-indentation')\n        .removeClass('tree-child')\n        .removeClass('tree-child-first')\n        .removeClass('tree-child-last')\n        .removeClass('tree-child-horizontal');\n    });\n  };\n\n  /**\n   * Add an asterisk or other marker to the changed row.\n   */\n  Drupal.tableDrag.prototype.row.prototype.markChanged = function () {\n    const marker = Drupal.theme('tableDragChangedMarker');\n    const cell = $(this.element).find('td:first-of-type');\n    if (cell.find('.tabledrag-changed').length === 0) {\n      cell.append(marker);\n    }\n  };\n\n  /**\n   * Stub function. Allows a custom handler when a row is indented.\n   *\n   * @return {null}\n   *   Returns null when the stub function is used.\n   */\n  Drupal.tableDrag.prototype.row.prototype.onIndent = function () {\n    return null;\n  };\n\n  /**\n   * Stub function. Allows a custom handler when a row is swapped.\n   *\n   * @param {HTMLElement} swappedRow\n   *   The element for the swapped row.\n   *\n   * @return {null}\n   *   Returns null when the stub function is used.\n   */\n  Drupal.tableDrag.prototype.row.prototype.onSwap = function (swappedRow) {\n    return null;\n  };\n\n  $.extend(\n    Drupal.theme,\n    /** @lends Drupal.theme */ {\n      /**\n       * @return {string}\n       *  Markup for the marker.\n       */\n      tableDragChangedMarker() {\n        const markerClasses = [\n          'tabledrag-changed',\n          'font-bold',\n        ];\n\n        return `\n        <span title=\"${Drupal.t('Changed')}\" class=\"${markerClasses.join(' ')}\">${info}</span>`;\n      },\n\n      /**\n       * @return {string}\n       *   Markup for the indentation.\n       */\n      tableDragIndentation() {\n        return '<div class=\"js-indentation indentation\">&nbsp;</div>';\n      },\n\n      /**\n       * @return {string}\n       *   Markup for the warning.\n       */\n      tableDragChangedWarning() {\n        const warningClasses = [\n          ''\n        ];\n\n        return `\n        <div role=\"alert\" class=\"mb-1 border-l-8 p-4 bg-orange-100 border-orange-500 text-orange-900\">\n          <div class=\"flex items-center\">\n            ${Drupal.theme('tableDragChangedMarker')}\n            <div class=\"mx-3\">\n              ${Drupal.t('You have unsaved changes.')}\n            </div>\n          </div>\n        </div>`;\n      },\n    },\n  );\n})(jQuery, Drupal, drupalSettings);\n"],"sourceRoot":""}